{"ast":null,"code":"import _asyncToGenerator from \"/home/haider/Desktop/Projects/clips/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { map, delay, filter, switchMap } from 'rxjs/operators';\nimport { NavigationEnd } from '@angular/router';\nlet AuthService = class AuthService {\n  constructor(auth, db, router, route, redirect) {\n    this.auth = auth;\n    this.db = db;\n    this.router = router;\n    this.route = route;\n    this.redirect = redirect;\n    this.usersCollection = db.collection(\"users\");\n    this.isAuthenticated$ = auth.user.pipe(map(user => !!user));\n    this.isAuthenticatedWithDelay$ = this.isAuthenticated$.pipe(delay(1000));\n    this.router.events.pipe(filter(e => e instanceof NavigationEnd), map(e => this.route.firstChild), switchMap(r => {\n      var _a;\n\n      return (_a = r === null || r === void 0 ? void 0 : r.data) !== null && _a !== void 0 ? _a : of({});\n    })).subscribe(console.log);\n  }\n\n  createUser(userData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!userData.password) {\n        throw new Error(\"Password not provided\");\n      }\n\n      const userCred = yield _this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\n\n      if (!userCred.user) {\n        throw new Error(\"User can't be found\");\n      }\n\n      yield _this.usersCollection.doc(userCred.user.uid).set({\n        name: userData.name,\n        age: userData.age,\n        email: userData.email,\n        phoneNumber: userData.phoneNumber\n      });\n      yield userCred.user.updateProfile({\n        displayName: userData.name\n      });\n    })();\n  }\n\n  logout($event) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if ($event) {\n        $event.preventDefault();\n      }\n\n      yield _this2.auth.signOut();\n      yield _this2.router.navigateByUrl(\"/\");\n    })();\n  }\n\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"sources":["/home/haider/Desktop/Projects/clips/src/app/services/auth.service.ts"],"names":["__decorate","Injectable","of","map","delay","filter","switchMap","NavigationEnd","AuthService","constructor","auth","db","router","route","redirect","usersCollection","collection","isAuthenticated$","user","pipe","isAuthenticatedWithDelay$","events","e","firstChild","r","_a","data","subscribe","console","log","createUser","userData","password","Error","userCred","createUserWithEmailAndPassword","email","doc","uid","set","name","age","phoneNumber","updateProfile","displayName","logout","$event","preventDefault","signOut","navigateByUrl","providedIn"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { map, delay, filter, switchMap } from 'rxjs/operators';\nimport { NavigationEnd } from '@angular/router';\nlet AuthService = class AuthService {\n    constructor(auth, db, router, route, redirect) {\n        this.auth = auth;\n        this.db = db;\n        this.router = router;\n        this.route = route;\n        this.redirect = redirect;\n        this.usersCollection = db.collection(\"users\");\n        this.isAuthenticated$ = auth.user.pipe(map(user => !!user));\n        this.isAuthenticatedWithDelay$ = this.isAuthenticated$.pipe(delay(1000));\n        this.router.events.pipe(filter(e => e instanceof NavigationEnd), map(e => this.route.firstChild), switchMap(r => { var _a; return (_a = r === null || r === void 0 ? void 0 : r.data) !== null && _a !== void 0 ? _a : of({}); }))\n            .subscribe(console.log);\n    }\n    async createUser(userData) {\n        if (!userData.password) {\n            throw new Error(\"Password not provided\");\n        }\n        const userCred = await this.auth.createUserWithEmailAndPassword(userData.email, userData.password);\n        if (!userCred.user) {\n            throw new Error(\"User can't be found\");\n        }\n        await this.usersCollection.doc(userCred.user.uid).set({\n            name: userData.name,\n            age: userData.age,\n            email: userData.email,\n            phoneNumber: userData.phoneNumber\n        });\n        await userCred.user.updateProfile({\n            displayName: userData.name\n        });\n    }\n    async logout($event) {\n        if ($event) {\n            $event.preventDefault();\n        }\n        await this.auth.signOut();\n        await this.router.navigateByUrl(\"/\");\n    }\n};\nAuthService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], AuthService);\nexport { AuthService };\n"]},"metadata":{},"sourceType":"module"}